# coding: utf-8

"""
    Geo Engine Pro API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist
from geoengine_openapi_client.models.edr_vector_spec import EdrVectorSpec
from geoengine_openapi_client.models.provenance import Provenance

class EdrDataProviderDefinition(BaseModel):
    """
    EdrDataProviderDefinition
    """
    base_url: StrictStr = Field(..., alias="baseUrl")
    cache_ttl: Optional[conint(strict=True, ge=0)] = Field(None, alias="cacheTtl")
    description: StrictStr = Field(...)
    discrete_vrs: Optional[conlist(StrictStr)] = Field(None, alias="discreteVrs", description="List of vertical reference systems with a discrete scale")
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    priority: Optional[StrictInt] = None
    provenance: Optional[conlist(Provenance)] = None
    vector_spec: Optional[EdrVectorSpec] = Field(None, alias="vectorSpec")
    __properties = ["baseUrl", "cacheTtl", "description", "discreteVrs", "id", "name", "priority", "provenance", "vectorSpec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EdrDataProviderDefinition:
        """Create an instance of EdrDataProviderDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in provenance (list)
        _items = []
        if self.provenance:
            for _item in self.provenance:
                if _item:
                    _items.append(_item.to_dict())
            _dict['provenance'] = _items
        # override the default output from pydantic by calling `to_dict()` of vector_spec
        if self.vector_spec:
            _dict['vectorSpec'] = self.vector_spec.to_dict()
        # set to None if priority (nullable) is None
        # and __fields_set__ contains the field
        if self.priority is None and "priority" in self.__fields_set__:
            _dict['priority'] = None

        # set to None if provenance (nullable) is None
        # and __fields_set__ contains the field
        if self.provenance is None and "provenance" in self.__fields_set__:
            _dict['provenance'] = None

        # set to None if vector_spec (nullable) is None
        # and __fields_set__ contains the field
        if self.vector_spec is None and "vector_spec" in self.__fields_set__:
            _dict['vectorSpec'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EdrDataProviderDefinition:
        """Create an instance of EdrDataProviderDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EdrDataProviderDefinition.parse_obj(obj)

        _obj = EdrDataProviderDefinition.parse_obj({
            "base_url": obj.get("baseUrl"),
            "cache_ttl": obj.get("cacheTtl"),
            "description": obj.get("description"),
            "discrete_vrs": obj.get("discreteVrs"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "provenance": [Provenance.from_dict(_item) for _item in obj.get("provenance")] if obj.get("provenance") is not None else None,
            "vector_spec": EdrVectorSpec.from_dict(obj.get("vectorSpec")) if obj.get("vectorSpec") is not None else None
        })
        return _obj


