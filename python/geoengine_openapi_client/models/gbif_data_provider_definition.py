# coding: utf-8

"""
    Geo Engine Pro API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist
from geoengine_openapi_client.models.database_connection_config import DatabaseConnectionConfig

class GbifDataProviderDefinition(BaseModel):
    """
    GbifDataProviderDefinition
    """
    autocomplete_timeout: StrictInt = Field(..., alias="autocompleteTimeout")
    cache_ttl: Optional[conint(strict=True, ge=0)] = Field(None, alias="cacheTtl")
    columns: conlist(StrictStr) = Field(...)
    db_config: DatabaseConnectionConfig = Field(..., alias="dbConfig")
    description: StrictStr = Field(...)
    name: StrictStr = Field(...)
    priority: Optional[StrictInt] = None
    __properties = ["autocompleteTimeout", "cacheTtl", "columns", "dbConfig", "description", "name", "priority"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GbifDataProviderDefinition:
        """Create an instance of GbifDataProviderDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of db_config
        if self.db_config:
            _dict['dbConfig'] = self.db_config.to_dict()
        # set to None if priority (nullable) is None
        # and __fields_set__ contains the field
        if self.priority is None and "priority" in self.__fields_set__:
            _dict['priority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GbifDataProviderDefinition:
        """Create an instance of GbifDataProviderDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GbifDataProviderDefinition.parse_obj(obj)

        _obj = GbifDataProviderDefinition.parse_obj({
            "autocomplete_timeout": obj.get("autocompleteTimeout"),
            "cache_ttl": obj.get("cacheTtl"),
            "columns": obj.get("columns"),
            "db_config": DatabaseConnectionConfig.from_dict(obj.get("dbConfig")) if obj.get("dbConfig") is not None else None,
            "description": obj.get("description"),
            "name": obj.get("name"),
            "priority": obj.get("priority")
        })
        return _obj


