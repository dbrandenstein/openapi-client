# coding: utf-8

"""
    Geo Engine Pro API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint
from geoengine_openapi_client.models.database_connection_config import DatabaseConnectionConfig

class GfbioCollectionsDataProviderDefinition(BaseModel):
    """
    GfbioCollectionsDataProviderDefinition
    """
    abcd_db_config: DatabaseConnectionConfig = Field(..., alias="abcdDbConfig")
    cache_ttl: Optional[conint(strict=True, ge=0)] = Field(None, alias="cacheTtl")
    collection_api_auth_token: StrictStr = Field(..., alias="collectionApiAuthToken")
    collection_api_url: StrictStr = Field(..., alias="collectionApiUrl")
    description: StrictStr = Field(...)
    name: StrictStr = Field(...)
    pangaea_url: StrictStr = Field(..., alias="pangaeaUrl")
    priority: Optional[StrictInt] = None
    __properties = ["abcdDbConfig", "cacheTtl", "collectionApiAuthToken", "collectionApiUrl", "description", "name", "pangaeaUrl", "priority"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GfbioCollectionsDataProviderDefinition:
        """Create an instance of GfbioCollectionsDataProviderDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of abcd_db_config
        if self.abcd_db_config:
            _dict['abcdDbConfig'] = self.abcd_db_config.to_dict()
        # set to None if priority (nullable) is None
        # and __fields_set__ contains the field
        if self.priority is None and "priority" in self.__fields_set__:
            _dict['priority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GfbioCollectionsDataProviderDefinition:
        """Create an instance of GfbioCollectionsDataProviderDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GfbioCollectionsDataProviderDefinition.parse_obj(obj)

        _obj = GfbioCollectionsDataProviderDefinition.parse_obj({
            "abcd_db_config": DatabaseConnectionConfig.from_dict(obj.get("abcdDbConfig")) if obj.get("abcdDbConfig") is not None else None,
            "cache_ttl": obj.get("cacheTtl"),
            "collection_api_auth_token": obj.get("collectionApiAuthToken"),
            "collection_api_url": obj.get("collectionApiUrl"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "pangaea_url": obj.get("pangaeaUrl"),
            "priority": obj.get("priority")
        })
        return _obj


