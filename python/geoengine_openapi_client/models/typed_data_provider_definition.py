# coding: utf-8

"""
    Geo Engine Pro API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from geoengine_openapi_client.models.aruna_data_provider_definition_with_type import ArunaDataProviderDefinitionWithType
from geoengine_openapi_client.models.dataset_layer_listing_provider_definition_with_type import DatasetLayerListingProviderDefinitionWithType
from geoengine_openapi_client.models.ebv_portal_data_provider_definition_with_type import EbvPortalDataProviderDefinitionWithType
from geoengine_openapi_client.models.edr_data_provider_definition_with_type import EdrDataProviderDefinitionWithType
from geoengine_openapi_client.models.gbif_data_provider_definition_with_type import GbifDataProviderDefinitionWithType
from geoengine_openapi_client.models.gfbio_abcd_data_provider_definition_with_type import GfbioAbcdDataProviderDefinitionWithType
from geoengine_openapi_client.models.gfbio_collections_data_provider_definition_with_type import GfbioCollectionsDataProviderDefinitionWithType
from geoengine_openapi_client.models.net_cdf_cf_data_provider_definition_with_type import NetCdfCfDataProviderDefinitionWithType
from geoengine_openapi_client.models.pangaea_data_provider_definition_with_type import PangaeaDataProviderDefinitionWithType
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

TYPEDDATAPROVIDERDEFINITION_ONE_OF_SCHEMAS = ["ArunaDataProviderDefinitionWithType", "DatasetLayerListingProviderDefinitionWithType", "EbvPortalDataProviderDefinitionWithType", "EdrDataProviderDefinitionWithType", "GbifDataProviderDefinitionWithType", "GfbioAbcdDataProviderDefinitionWithType", "GfbioCollectionsDataProviderDefinitionWithType", "NetCdfCfDataProviderDefinitionWithType", "PangaeaDataProviderDefinitionWithType"]

class TypedDataProviderDefinition(BaseModel):
    """
    TypedDataProviderDefinition
    """
    # data type: ArunaDataProviderDefinitionWithType
    oneof_schema_1_validator: Optional[ArunaDataProviderDefinitionWithType] = None
    # data type: DatasetLayerListingProviderDefinitionWithType
    oneof_schema_2_validator: Optional[DatasetLayerListingProviderDefinitionWithType] = None
    # data type: GbifDataProviderDefinitionWithType
    oneof_schema_3_validator: Optional[GbifDataProviderDefinitionWithType] = None
    # data type: GfbioAbcdDataProviderDefinitionWithType
    oneof_schema_4_validator: Optional[GfbioAbcdDataProviderDefinitionWithType] = None
    # data type: GfbioCollectionsDataProviderDefinitionWithType
    oneof_schema_5_validator: Optional[GfbioCollectionsDataProviderDefinitionWithType] = None
    # data type: EbvPortalDataProviderDefinitionWithType
    oneof_schema_6_validator: Optional[EbvPortalDataProviderDefinitionWithType] = None
    # data type: NetCdfCfDataProviderDefinitionWithType
    oneof_schema_7_validator: Optional[NetCdfCfDataProviderDefinitionWithType] = None
    # data type: PangaeaDataProviderDefinitionWithType
    oneof_schema_8_validator: Optional[PangaeaDataProviderDefinitionWithType] = None
    # data type: EdrDataProviderDefinitionWithType
    oneof_schema_9_validator: Optional[EdrDataProviderDefinitionWithType] = None
    if TYPE_CHECKING:
        actual_instance: Union[ArunaDataProviderDefinitionWithType, DatasetLayerListingProviderDefinitionWithType, EbvPortalDataProviderDefinitionWithType, EdrDataProviderDefinitionWithType, GbifDataProviderDefinitionWithType, GfbioAbcdDataProviderDefinitionWithType, GfbioCollectionsDataProviderDefinitionWithType, NetCdfCfDataProviderDefinitionWithType, PangaeaDataProviderDefinitionWithType]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(TYPEDDATAPROVIDERDEFINITION_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = TypedDataProviderDefinition.construct()
        error_messages = []
        match = 0
        # validate data type: ArunaDataProviderDefinitionWithType
        if not isinstance(v, ArunaDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ArunaDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: DatasetLayerListingProviderDefinitionWithType
        if not isinstance(v, DatasetLayerListingProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatasetLayerListingProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: GbifDataProviderDefinitionWithType
        if not isinstance(v, GbifDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GbifDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: GfbioAbcdDataProviderDefinitionWithType
        if not isinstance(v, GfbioAbcdDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GfbioAbcdDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: GfbioCollectionsDataProviderDefinitionWithType
        if not isinstance(v, GfbioCollectionsDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GfbioCollectionsDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: EbvPortalDataProviderDefinitionWithType
        if not isinstance(v, EbvPortalDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EbvPortalDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: NetCdfCfDataProviderDefinitionWithType
        if not isinstance(v, NetCdfCfDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NetCdfCfDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: PangaeaDataProviderDefinitionWithType
        if not isinstance(v, PangaeaDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PangaeaDataProviderDefinitionWithType`")
        else:
            match += 1
        # validate data type: EdrDataProviderDefinitionWithType
        if not isinstance(v, EdrDataProviderDefinitionWithType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EdrDataProviderDefinitionWithType`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in TypedDataProviderDefinition with oneOf schemas: ArunaDataProviderDefinitionWithType, DatasetLayerListingProviderDefinitionWithType, EbvPortalDataProviderDefinitionWithType, EdrDataProviderDefinitionWithType, GbifDataProviderDefinitionWithType, GfbioAbcdDataProviderDefinitionWithType, GfbioCollectionsDataProviderDefinitionWithType, NetCdfCfDataProviderDefinitionWithType, PangaeaDataProviderDefinitionWithType. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in TypedDataProviderDefinition with oneOf schemas: ArunaDataProviderDefinitionWithType, DatasetLayerListingProviderDefinitionWithType, EbvPortalDataProviderDefinitionWithType, EdrDataProviderDefinitionWithType, GbifDataProviderDefinitionWithType, GfbioAbcdDataProviderDefinitionWithType, GfbioCollectionsDataProviderDefinitionWithType, NetCdfCfDataProviderDefinitionWithType, PangaeaDataProviderDefinitionWithType. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> TypedDataProviderDefinition:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> TypedDataProviderDefinition:
        """Returns the object represented by the json string"""
        instance = TypedDataProviderDefinition.construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `ArunaDataProviderDefinitionWithType`
        if _data_type == "ArunaDataProviderDefinition":
            instance.actual_instance = ArunaDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `ArunaDataProviderDefinitionWithType`
        if _data_type == "ArunaDataProviderDefinitionWithType":
            instance.actual_instance = ArunaDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `DatasetLayerListingProviderDefinitionWithType`
        if _data_type == "DatasetLayerListingProviderDefinition":
            instance.actual_instance = DatasetLayerListingProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `DatasetLayerListingProviderDefinitionWithType`
        if _data_type == "DatasetLayerListingProviderDefinitionWithType":
            instance.actual_instance = DatasetLayerListingProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `EbvPortalDataProviderDefinitionWithType`
        if _data_type == "EbvPortalDataProviderDefinition":
            instance.actual_instance = EbvPortalDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `EbvPortalDataProviderDefinitionWithType`
        if _data_type == "EbvPortalDataProviderDefinitionWithType":
            instance.actual_instance = EbvPortalDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `EdrDataProviderDefinitionWithType`
        if _data_type == "EdrDataProviderDefinition":
            instance.actual_instance = EdrDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `EdrDataProviderDefinitionWithType`
        if _data_type == "EdrDataProviderDefinitionWithType":
            instance.actual_instance = EdrDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `GbifDataProviderDefinitionWithType`
        if _data_type == "GbifDataProviderDefinition":
            instance.actual_instance = GbifDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `GbifDataProviderDefinitionWithType`
        if _data_type == "GbifDataProviderDefinitionWithType":
            instance.actual_instance = GbifDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `GfbioAbcdDataProviderDefinitionWithType`
        if _data_type == "GfbioAbcdDataProviderDefinition":
            instance.actual_instance = GfbioAbcdDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `GfbioAbcdDataProviderDefinitionWithType`
        if _data_type == "GfbioAbcdDataProviderDefinitionWithType":
            instance.actual_instance = GfbioAbcdDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `GfbioCollectionsDataProviderDefinitionWithType`
        if _data_type == "GfbioCollectionsDataProviderDefinition":
            instance.actual_instance = GfbioCollectionsDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `GfbioCollectionsDataProviderDefinitionWithType`
        if _data_type == "GfbioCollectionsDataProviderDefinitionWithType":
            instance.actual_instance = GfbioCollectionsDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `NetCdfCfDataProviderDefinitionWithType`
        if _data_type == "NetCdfCfDataProviderDefinition":
            instance.actual_instance = NetCdfCfDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `NetCdfCfDataProviderDefinitionWithType`
        if _data_type == "NetCdfCfDataProviderDefinitionWithType":
            instance.actual_instance = NetCdfCfDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `PangaeaDataProviderDefinitionWithType`
        if _data_type == "PangaeaDataProviderDefinition":
            instance.actual_instance = PangaeaDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # check if data type is `PangaeaDataProviderDefinitionWithType`
        if _data_type == "PangaeaDataProviderDefinitionWithType":
            instance.actual_instance = PangaeaDataProviderDefinitionWithType.from_json(json_str)
            return instance

        # deserialize data into ArunaDataProviderDefinitionWithType
        try:
            instance.actual_instance = ArunaDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatasetLayerListingProviderDefinitionWithType
        try:
            instance.actual_instance = DatasetLayerListingProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GbifDataProviderDefinitionWithType
        try:
            instance.actual_instance = GbifDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GfbioAbcdDataProviderDefinitionWithType
        try:
            instance.actual_instance = GfbioAbcdDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GfbioCollectionsDataProviderDefinitionWithType
        try:
            instance.actual_instance = GfbioCollectionsDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EbvPortalDataProviderDefinitionWithType
        try:
            instance.actual_instance = EbvPortalDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NetCdfCfDataProviderDefinitionWithType
        try:
            instance.actual_instance = NetCdfCfDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PangaeaDataProviderDefinitionWithType
        try:
            instance.actual_instance = PangaeaDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EdrDataProviderDefinitionWithType
        try:
            instance.actual_instance = EdrDataProviderDefinitionWithType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into TypedDataProviderDefinition with oneOf schemas: ArunaDataProviderDefinitionWithType, DatasetLayerListingProviderDefinitionWithType, EbvPortalDataProviderDefinitionWithType, EdrDataProviderDefinitionWithType, GbifDataProviderDefinitionWithType, GfbioAbcdDataProviderDefinitionWithType, GfbioCollectionsDataProviderDefinitionWithType, NetCdfCfDataProviderDefinitionWithType, PangaeaDataProviderDefinitionWithType. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into TypedDataProviderDefinition with oneOf schemas: ArunaDataProviderDefinitionWithType, DatasetLayerListingProviderDefinitionWithType, EbvPortalDataProviderDefinitionWithType, EdrDataProviderDefinitionWithType, GbifDataProviderDefinitionWithType, GfbioAbcdDataProviderDefinitionWithType, GfbioCollectionsDataProviderDefinitionWithType, NetCdfCfDataProviderDefinitionWithType, PangaeaDataProviderDefinitionWithType. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


