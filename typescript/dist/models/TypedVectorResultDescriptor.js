"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedVectorResultDescriptorTypeEnum = void 0;
exports.instanceOfTypedVectorResultDescriptor = instanceOfTypedVectorResultDescriptor;
exports.TypedVectorResultDescriptorFromJSON = TypedVectorResultDescriptorFromJSON;
exports.TypedVectorResultDescriptorFromJSONTyped = TypedVectorResultDescriptorFromJSONTyped;
exports.TypedVectorResultDescriptorToJSON = TypedVectorResultDescriptorToJSON;
exports.TypedVectorResultDescriptorToJSONTyped = TypedVectorResultDescriptorToJSONTyped;
const runtime_1 = require("../runtime");
const VectorDataType_1 = require("./VectorDataType");
const TimeInterval_1 = require("./TimeInterval");
const VectorColumnInfo_1 = require("./VectorColumnInfo");
const BoundingBox2D_1 = require("./BoundingBox2D");
/**
 * @export
 */
exports.TypedVectorResultDescriptorTypeEnum = {
    Vector: 'vector'
};
/**
 * Check if a given object implements the TypedVectorResultDescriptor interface.
 */
function instanceOfTypedVectorResultDescriptor(value) {
    if (!('columns' in value) || value['columns'] === undefined)
        return false;
    if (!('dataType' in value) || value['dataType'] === undefined)
        return false;
    if (!('spatialReference' in value) || value['spatialReference'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    return true;
}
function TypedVectorResultDescriptorFromJSON(json) {
    return TypedVectorResultDescriptorFromJSONTyped(json, false);
}
function TypedVectorResultDescriptorFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'bbox': json['bbox'] == null ? undefined : (0, BoundingBox2D_1.BoundingBox2DFromJSON)(json['bbox']),
        'columns': ((0, runtime_1.mapValues)(json['columns'], VectorColumnInfo_1.VectorColumnInfoFromJSON)),
        'dataType': (0, VectorDataType_1.VectorDataTypeFromJSON)(json['dataType']),
        'spatialReference': json['spatialReference'],
        'time': json['time'] == null ? undefined : (0, TimeInterval_1.TimeIntervalFromJSON)(json['time']),
        'type': json['type'],
    };
}
function TypedVectorResultDescriptorToJSON(json) {
    return TypedVectorResultDescriptorToJSONTyped(json, false);
}
function TypedVectorResultDescriptorToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'bbox': (0, BoundingBox2D_1.BoundingBox2DToJSON)(value['bbox']),
        'columns': ((0, runtime_1.mapValues)(value['columns'], VectorColumnInfo_1.VectorColumnInfoToJSON)),
        'dataType': (0, VectorDataType_1.VectorDataTypeToJSON)(value['dataType']),
        'spatialReference': value['spatialReference'],
        'time': (0, TimeInterval_1.TimeIntervalToJSON)(value['time']),
        'type': value['type'],
    };
}
