/* tslint:disable */
/* eslint-disable */
/**
 * Geo Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: dev@geoengine.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SpatialResolution } from './SpatialResolution';
import {
    SpatialResolutionFromJSON,
    SpatialResolutionFromJSONTyped,
    SpatialResolutionToJSON,
    SpatialResolutionToJSONTyped,
} from './SpatialResolution';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    TimeIntervalToJSONTyped,
} from './TimeInterval';
import type { RasterBandDescriptor } from './RasterBandDescriptor';
import {
    RasterBandDescriptorFromJSON,
    RasterBandDescriptorFromJSONTyped,
    RasterBandDescriptorToJSON,
    RasterBandDescriptorToJSONTyped,
} from './RasterBandDescriptor';
import type { RasterDataType } from './RasterDataType';
import {
    RasterDataTypeFromJSON,
    RasterDataTypeFromJSONTyped,
    RasterDataTypeToJSON,
    RasterDataTypeToJSONTyped,
} from './RasterDataType';
import type { SpatialPartition2D } from './SpatialPartition2D';
import {
    SpatialPartition2DFromJSON,
    SpatialPartition2DFromJSONTyped,
    SpatialPartition2DToJSON,
    SpatialPartition2DToJSONTyped,
} from './SpatialPartition2D';

/**
 * A `ResultDescriptor` for raster queries
 * @export
 * @interface TypedRasterResultDescriptor
 */
export interface TypedRasterResultDescriptor {
    /**
     * 
     * @type {Array<RasterBandDescriptor>}
     * @memberof TypedRasterResultDescriptor
     */
    bands: Array<RasterBandDescriptor>;
    /**
     * 
     * @type {SpatialPartition2D}
     * @memberof TypedRasterResultDescriptor
     */
    bbox?: SpatialPartition2D | null;
    /**
     * 
     * @type {RasterDataType}
     * @memberof TypedRasterResultDescriptor
     */
    dataType: RasterDataType;
    /**
     * 
     * @type {SpatialResolution}
     * @memberof TypedRasterResultDescriptor
     */
    resolution?: SpatialResolution | null;
    /**
     * 
     * @type {string}
     * @memberof TypedRasterResultDescriptor
     */
    spatialReference: string;
    /**
     * 
     * @type {TimeInterval}
     * @memberof TypedRasterResultDescriptor
     */
    time?: TimeInterval | null;
    /**
     * 
     * @type {string}
     * @memberof TypedRasterResultDescriptor
     */
    type: TypedRasterResultDescriptorTypeEnum;
}


/**
 * @export
 */
export const TypedRasterResultDescriptorTypeEnum = {
    Raster: 'raster'
} as const;
export type TypedRasterResultDescriptorTypeEnum = typeof TypedRasterResultDescriptorTypeEnum[keyof typeof TypedRasterResultDescriptorTypeEnum];


/**
 * Check if a given object implements the TypedRasterResultDescriptor interface.
 */
export function instanceOfTypedRasterResultDescriptor(value: object): value is TypedRasterResultDescriptor {
    if (!('bands' in value) || value['bands'] === undefined) return false;
    if (!('dataType' in value) || value['dataType'] === undefined) return false;
    if (!('spatialReference' in value) || value['spatialReference'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function TypedRasterResultDescriptorFromJSON(json: any): TypedRasterResultDescriptor {
    return TypedRasterResultDescriptorFromJSONTyped(json, false);
}

export function TypedRasterResultDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedRasterResultDescriptor {
    if (json == null) {
        return json;
    }
    return {
        
        'bands': ((json['bands'] as Array<any>).map(RasterBandDescriptorFromJSON)),
        'bbox': json['bbox'] == null ? undefined : SpatialPartition2DFromJSON(json['bbox']),
        'dataType': RasterDataTypeFromJSON(json['dataType']),
        'resolution': json['resolution'] == null ? undefined : SpatialResolutionFromJSON(json['resolution']),
        'spatialReference': json['spatialReference'],
        'time': json['time'] == null ? undefined : TimeIntervalFromJSON(json['time']),
        'type': json['type'],
    };
}

export function TypedRasterResultDescriptorToJSON(json: any): TypedRasterResultDescriptor {
    return TypedRasterResultDescriptorToJSONTyped(json, false);
}

export function TypedRasterResultDescriptorToJSONTyped(value?: TypedRasterResultDescriptor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bands': ((value['bands'] as Array<any>).map(RasterBandDescriptorToJSON)),
        'bbox': SpatialPartition2DToJSON(value['bbox']),
        'dataType': RasterDataTypeToJSON(value['dataType']),
        'resolution': SpatialResolutionToJSON(value['resolution']),
        'spatialReference': value['spatialReference'],
        'time': TimeIntervalToJSON(value['time']),
        'type': value['type'],
    };
}

